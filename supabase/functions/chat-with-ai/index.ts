
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Enhanced environment validation with detailed logging
function validateEnvironmentVariables() {
  console.log('üîß Validating environment variables...');
  
  const requiredVars = {
    OPENAI_API_KEY: Deno.env.get('OPENAI_API_KEY'),
    SUPABASE_URL: Deno.env.get('SUPABASE_URL'),
    SUPABASE_ANON_KEY: Deno.env.get('SUPABASE_ANON_KEY'),
    N8N_WEBHOOK_URL: Deno.env.get('N8N_WEBHOOK_URL')
  };

  const missing = Object.entries(requiredVars)
    .filter(([_, value]) => !value)
    .map(([key, _]) => key);
  
  if (missing.length > 0) {
    console.error('‚ùå Missing required environment variables:', missing);
    return { valid: false, missing };
  }
  
  console.log('‚úÖ All environment variables are present');
  return { valid: true, missing: [] };
}

// N8N webhook call function
async function callN8NWebhook(data: any, language: string) {
  const n8nWebhookUrl = Deno.env.get('N8N_WEBHOOK_URL');
  
  if (!n8nWebhookUrl) {
    console.error('‚ùå N8N_WEBHOOK_URL not configured');
    return null;
  }

  try {
    console.log('üîÑ Calling N8N webhook with data:', data);
    
    const response = await fetch(n8nWebhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        ...data,
        language: language
      }),
    });

    if (!response.ok) {
      console.error('‚ùå N8N webhook failed:', response.status, response.statusText);
      return null;
    }

    const result = await response.json();
    console.log('‚úÖ N8N webhook response received:', result);
    return result;
  } catch (error) {
    console.error('‚ùå N8N webhook error:', error);
    return null;
  }
}

// Process N8N calls in AI response
async function processN8NCalls(aiResponse: string, language: string): Promise<string> {
  const n8nPattern = /\[N8N_CALL:({[^}]+})\]/g;
  let processedResponse = aiResponse;
  let match;

  while ((match = n8nPattern.exec(aiResponse)) !== null) {
    try {
      const n8nData = JSON.parse(match[1]);
      console.log('üîß Processing N8N call:', n8nData);
      
      const n8nResult = await callN8NWebhook(n8nData, language);
      
      if (n8nResult && n8nResult.data) {
        // Replace N8N command with actual result
        const resultText = `\n\n**Legal Research Results:**\n${n8nResult.data}\n\n`;
        processedResponse = processedResponse.replace(match[0], resultText);
        console.log('‚úÖ N8N call processed successfully');
      } else {
        // Remove N8N command if no result
        processedResponse = processedResponse.replace(match[0], '');
        console.log('‚ö†Ô∏è N8N call returned no data');
      }
    } catch (error) {
      console.error('‚ùå Error processing N8N call:', error);
      // Remove failed N8N command
      processedResponse = processedResponse.replace(match[0], '');
    }
  }

  return processedResponse;
}

// Health check endpoint
function handleHealthCheck() {
  const envValidation = validateEnvironmentVariables();
  
  return new Response(
    JSON.stringify({ 
      status: 'healthy',
      timestamp: new Date().toISOString(),
      environment: envValidation.valid ? 'ok' : 'missing_vars',
      missing_vars: envValidation.missing
    }),
    {
      status: envValidation.valid ? 200 : 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    }
  );
}

serve(async (req) => {
  console.log(`üöÄ Edge Function called: ${req.method} ${req.url}`);
  
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ CORS preflight handled');
    return new Response(null, { headers: corsHeaders });
  }

  // Health check endpoint
  if (req.url.includes('/health')) {
    console.log('üè• Health check requested');
    return handleHealthCheck();
  }

  try {
    // Validate environment variables at the start
    const envValidation = validateEnvironmentVariables();
    if (!envValidation.valid) {
      console.error('‚ùå Environment validation failed');
      return new Response(
        JSON.stringify({ 
          error: 'Server configuration error: Missing environment variables',
          missing: envValidation.missing,
          success: false 
        }),
        {
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Validate request method
    if (req.method !== 'POST') {
      console.error('‚ùå Invalid method:', req.method);
      return new Response(
        JSON.stringify({ 
          error: 'Method not allowed',
          success: false 
        }),
        {
          status: 405,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseAnonKey = Deno.env.get('SUPABASE_ANON_KEY');

    const supabase = createClient(supabaseUrl!, supabaseAnonKey!);
    
    // Enhanced auth handling
    const authHeader = req.headers.get('authorization');
    if (!authHeader) {
      console.error('‚ùå No authorization header provided');
      return new Response(
        JSON.stringify({ 
          error: 'Authorization required',
          success: false 
        }),
        {
          status: 401,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    console.log('üîê Validating user token...');
    const { data: { user }, error: authError } = await supabase.auth.getUser(
      authHeader.replace('Bearer ', '')
    );

    if (authError || !user) {
      console.error('‚ùå Auth error:', authError);
      return new Response(
        JSON.stringify({ 
          error: 'Invalid token',
          success: false 
        }),
        {
          status: 401,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    console.log('‚úÖ User authenticated:', user.id);

    // Enhanced request body parsing
    let requestBody;
    try {
      const contentType = req.headers.get('content-type');
      console.log('üìù Content-Type:', contentType);
      
      requestBody = await req.json();
      console.log('üìã Request body parsed successfully');
    } catch (parseError) {
      console.error('‚ùå Failed to parse request body:', parseError);
      return new Response(
        JSON.stringify({ 
          error: 'Invalid request body - must be valid JSON',
          success: false 
        }),
        {
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    const { message, chatId, language = 'nl' } = requestBody;

    // Enhanced input validation
    if (!message || typeof message !== 'string' || message.trim().length === 0) {
      console.error('‚ùå Invalid message field:', { message, type: typeof message });
      return new Response(
        JSON.stringify({ 
          error: 'Message is required and must be non-empty string',
          success: false 
        }),
        {
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Validate language parameter
    const supportedLanguages = ['nl', 'en', 'ar', 'es', 'ru', 'fr'];
    if (!supportedLanguages.includes(language)) {
      console.warn('‚ö†Ô∏è Unsupported language, defaulting to nl:', language);
    }

    console.log('üåç Processing request:', {
      userId: user.id,
      language,
      messageLength: message.length,
      chatId: chatId || 'new chat'
    });

    // Check chat limits for new chats
    if (!chatId) {
      try {
        console.log('üìä Checking chat limits for user...');
        const { data: canCreate, error: limitError } = await supabase.rpc('can_create_chat', {
          user_uuid: user.id
        });

        if (limitError) {
          console.error('‚ùå Error checking chat limits:', limitError);
          return new Response(
            JSON.stringify({ 
              error: 'Error checking chat limits',
              success: false 
            }),
            {
              status: 500,
              headers: { ...corsHeaders, 'Content-Type': 'application/json' }
            }
          );
        }

        if (!canCreate) {
          console.log('‚ö†Ô∏è Chat limit reached for user:', user.id);
          return new Response(
            JSON.stringify({ 
              error: 'Chat limit reached',
              type: 'LIMIT_REACHED',
              success: false
            }),
            {
              status: 403,
              headers: { ...corsHeaders, 'Content-Type': 'application/json' }
            }
          );
        }
      } catch (rpcError) {
        console.error('‚ùå RPC call failed:', rpcError);
        return new Response(
          JSON.stringify({ 
            error: 'Failed to check chat limits',
            success: false 
          }),
          {
            status: 500,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          }
        );
      }
    }

    // Enhanced system prompts with N8N integration
    const systemPrompts: Record<string, string> = {
      en: `You are an AI assistant specialized in Dutch law. You provide users with high-quality legal summaries ("juridische informatie") in response to their questions.

Your goal is to give clear, accurate, and actionable legal insights based on Dutch law and court practice. You do not simply provide general advice ‚Äî your answer must include:

1. A short legal analysis of the situation
2. A practical plan of action
3. A warning about possible legal risks or consequences
4. (If applicable) Mention of similar court cases or common outcomes
5. (If requested or relevant) A draft or template of a letter or response, in the correct language (e.g. Dutch for companies or authorities)

You **must not refer the user to a lawyer** unless the situation is truly urgent, serious, or legally unclear. Your answer must solve the user's issue as much as possible within your knowledge.

Always reply in the language used by the user in the interface, unless a different language is clearly needed for the purpose of the message (e.g. composing a formal letter in Dutch).

Clarify that your answer is an informative legal summary, not formal legal advice.

If you believe the user's question requires access to court decisions, legal precedent, or specific law texts, use the following N8N command to trigger an external legal search:

[N8N_CALL:{"action":"legal_search","type":"case_law","data":{"query":"your search query here","language":"en"}}]

Do not ask the user to initiate this search. Decide on your own when it is relevant, and integrate the result naturally into your reply.`,

      nl: `Je bent een AI-assistent gespecialiseerd in Nederlands recht. Je geeft gebruikers hoogwaardige juridische samenvattingen ("juridische informatie") als reactie op hun vragen.

Je doel is om duidelijke, nauwkeurige en bruikbare juridische inzichten te geven gebaseerd op Nederlands recht en rechtspraak. Je geeft niet alleen algemeen advies ‚Äî je antwoord moet bevatten:

1. Een korte juridische analyse van de situatie
2. Een praktisch actieplan
3. Een waarschuwing voor mogelijke juridische risico's of gevolgen
4. (Indien van toepassing) Vermelding van vergelijkbare rechtszaken of gangbare uitkomsten
5. (Indien gevraagd of relevant) Een concept of sjabloon van een brief of reactie, in de juiste taal (bijv. Nederlands voor bedrijven of autoriteiten)

Je **mag de gebruiker niet doorverwijzen naar een advocaat** tenzij de situatie echt urgent, ernstig of juridisch onduidelijk is. Je antwoord moet het probleem van de gebruiker zoveel mogelijk oplossen binnen je kennis.

Antwoord altijd in de taal die de gebruiker in de interface gebruikt, tenzij een andere taal duidelijk nodig is voor het doel van het bericht (bijv. het opstellen van een formele brief in het Nederlands).

Verduidelijk dat je antwoord een informatieve juridische samenvatting is, geen formeel juridisch advies.

Als je denkt dat de vraag van de gebruiker toegang tot rechterlijke uitspraken, jurisprudentie of specifieke wetteksten vereist, gebruik dan de volgende N8N-opdracht om een externe juridische zoekopdracht te starten:

[N8N_CALL:{"action":"legal_search","type":"case_law","data":{"query":"je zoekopdracht hier","language":"nl"}}]

Vraag de gebruiker niet om deze zoekopdracht te starten. Beslis zelf wanneer het relevant is en integreer het resultaat natuurlijk in je antwoord.`,

      ru: `–í—ã - AI-–ø–æ–º–æ—â–Ω–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –≥–æ–ª–ª–∞–Ω–¥—Å–∫–æ–º –ø—Ä–∞–≤–µ. –í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—é–º–µ ("juridische informatie") –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Ö –≤–æ–ø—Ä–æ—Å—ã.

–í–∞—à–∞ —Ü–µ–ª—å - –¥–∞—Ç—å —á–µ—Ç–∫–∏–µ, —Ç–æ—á–Ω—ã–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ–ª–ª–∞–Ω–¥—Å–∫–æ–≥–æ –ø—Ä–∞–≤–∞ –∏ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏. –í—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –¥–∞–µ—Ç–µ –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã ‚Äî –≤–∞—à –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:

1. –ö—Ä–∞—Ç–∫–∏–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏
2. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
3. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–∞—Ö –∏–ª–∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö
4. (–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ—Ö–æ–∂–∏—Ö —Å—É–¥–µ–±–Ω—ã—Ö –¥–µ–ª–∞—Ö –∏–ª–∏ —Ç–∏–ø–∏—á–Ω—ã—Ö –∏—Å—Ö–æ–¥–∞—Ö
5. (–ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –ü—Ä–æ–µ–∫—Ç –∏–ª–∏ —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —è–∑—ã–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –≥–æ–ª–ª–∞–Ω–¥—Å–∫–æ–º –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π –∏–ª–∏ –≤–ª–∞—Å—Ç–µ–π)

–í—ã **–Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∞–¥–≤–æ–∫–∞—Ç—É**, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–æ—á–Ω–æ–π, —Å–µ—Ä—å–µ–∑–Ω–æ–π –∏–ª–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –Ω–µ—è—Å–Ω–æ–π. –í–∞—à –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–º–∫–∞—Ö –≤–∞—à–∏—Ö –∑–Ω–∞–Ω–∏–π.

–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥–æ–π —è–∑—ã–∫ —è–≤–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ü–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –Ω–∞ –≥–æ–ª–ª–∞–Ω–¥—Å–∫–æ–º —è–∑—ã–∫–µ).

–£—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –≤–∞—à –æ—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º —Ä–µ–∑—é–º–µ, –∞ –Ω–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.

–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—É–¥–µ–±–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º, –ø—Ä–∞–≤–æ–≤—ã–º –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–∞–º –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–∞–≤–æ–≤—ã–º —Ç–µ–∫—Å—Ç–∞–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É N8N –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞:

[N8N_CALL:{"action":"legal_search","type":"case_law","data":{"query":"–≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∑–¥–µ—Å—å","language":"ru"}}]

–ù–µ –ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–æ–∏—Å–∫. –†–µ—à–∞–π—Ç–µ —Å–∞–º–∏, –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ, –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–≤–æ–π –æ—Ç–≤–µ—Ç.`,

      fr: `Vous √™tes un assistant IA sp√©cialis√© dans le droit n√©erlandais. Vous fournissez aux utilisateurs des r√©sum√©s juridiques de haute qualit√© ("juridische informatie") en r√©ponse √† leurs questions.

Votre objectif est de donner des conseils juridiques clairs, pr√©cis et pratiques bas√©s sur le droit n√©erlandais et la jurisprudence. Vous ne donnez pas seulement des conseils g√©n√©raux ‚Äî votre r√©ponse doit inclure :

1. Une analyse juridique courte de la situation
2. Un plan d'action pratique
3. Un avertissement sur les risques juridiques possibles ou les cons√©quences
4. (Le cas √©ch√©ant) Mention de cas juridiques similaires ou de r√©sultats courants
5. (Si demand√© ou pertinent) Un projet ou mod√®le de lettre ou de r√©ponse, dans la langue correcte (par exemple en n√©erlandais pour les entreprises ou autorit√©s)

Vous **ne devez pas r√©f√©rer l'utilisateur √† un avocat** sauf si la situation est vraiment urgente, s√©rieuse ou juridiquement incertaine. Votre r√©ponse doit r√©soudre le probl√®me de l'utilisateur autant que possible dans vos connaissances.

R√©pondez toujours dans la langue que l'utilisateur utilise dans l'interface, sauf si une langue diff√©rente est clairement n√©cessaire pour le but du message (par exemple composer une lettre formelle en n√©erlandais).

Clarifiez que votre r√©ponse est un r√©sum√© juridique informatif, pas un conseil juridique formel.

Si vous pensez que la question de l'utilisateur n√©cessite l'acc√®s aux d√©cisions judiciaires, aux pr√©c√©dents juridiques ou aux textes de loi sp√©cifiques, utilisez la commande N8N suivante pour d√©clencher une recherche juridique externe :

[N8N_CALL:{"action":"legal_search","type":"case_law","data":{"query":"votre requ√™te de recherche ici","language":"fr"}}]

Ne demandez pas √† l'utilisateur d'initier cette recherche. D√©cidez par vous-m√™me quand c'est pertinent et int√©grez le r√©sultat naturellement dans votre r√©ponse.`,

      es: `Eres un asistente de IA especializado en derecho holand√©s. Proporcionas a los usuarios res√∫menes legales de alta calidad ("juridische informatie") en respuesta a sus preguntas.

Tu objetivo es dar consejos legales claros, precisos y pr√°cticos basados en el derecho holand√©s y la jurisprudencia. No solo das consejos generales ‚Äî tu respuesta debe incluir:

1. Un an√°lisis legal breve de la situaci√≥n
2. Un plan de acci√≥n pr√°ctico
3. Una advertencia sobre posibles riesgos legales o consecuencias
4. (Si aplica) Menci√≥n de casos legales similares o resultados comunes
5. (Si se solicita o es relevante) Un borrador o plantilla de carta o respuesta, en el idioma correcto (por ejemplo en holand√©s para empresas o autoridades)

**No debes referir al usuario a un abogado** a menos que la situaci√≥n sea realmente urgente, seria o legalmente incierta. Tu respuesta debe resolver el problema del usuario tanto como sea posible dentro de tu conocimiento.

Siempre responde en el idioma que el usuario usa en la interfaz, a menos que un idioma diferente sea claramente necesario para el prop√≥sito del mensaje (por ejemplo componer una carta formal en holand√©s).

Aclara que tu respuesta es un resumen legal informativo, no consejo legal formal.

Si crees que la pregunta del usuario requiere acceso a decisiones judiciales, precedentes legales o textos de ley espec√≠ficos, usa el siguiente comando N8N para activar una b√∫squeda legal externa:

[N8N_CALL:{"action":"legal_search","type":"case_law","data":{"query":"tu consulta de b√∫squeda aqu√≠","language":"es"}}]

No le pidas al usuario que inicie esta b√∫squeda. Decide por ti mismo cu√°ndo es relevante e integra el resultado naturalmente en tu respuesta.`,

      ar: `ÿ£ŸÜÿ™ ŸÖÿ≥ÿßÿπÿØ ÿ∞ŸÉŸä ŸÖÿ™ÿÆÿµÿµ ŸÅŸä ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿßŸÑŸáŸàŸÑŸÜÿØŸä. ÿ™ŸÇÿØŸÖ ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ŸÖŸÑÿÆÿµÿßÿ™ ŸÇÿßŸÜŸàŸÜŸäÿ© ÿπÿßŸÑŸäÿ© ÿßŸÑÿ¨ŸàÿØÿ© ("juridische informatie") ŸÉÿ±ÿØŸàÿØ ÿπŸÑŸâ ÿ£ÿ≥ÿ¶ŸÑÿ™ŸáŸÖ.

ŸáÿØŸÅŸÉ ŸáŸà ÿ™ŸÇÿØŸäŸÖ ŸÜÿµÿßÿ¶ÿ≠ ŸÇÿßŸÜŸàŸÜŸäÿ© Ÿàÿßÿ∂ÿ≠ÿ© ŸàÿØŸÇŸäŸÇÿ© ŸàÿπŸÖŸÑŸäÿ© ŸÖÿ®ŸÜŸäÿ© ÿπŸÑŸâ ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿßŸÑŸáŸàŸÑŸÜÿØŸä ŸàÿßŸÑÿßÿ¨ÿ™ŸáÿßÿØ ÿßŸÑŸÇÿ∂ÿßÿ¶Ÿä. ŸÑÿß ÿ™ŸÇÿØŸÖ ŸÅŸÇÿ∑ ŸÜÿµÿßÿ¶ÿ≠ ÿπÿßŸÖÿ© ‚Äî Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ÿ™ÿ∂ŸÖŸÜ ÿ•ÿ¨ÿßÿ®ÿ™ŸÉ:

1. ÿ™ÿ≠ŸÑŸäŸÑ ŸÇÿßŸÜŸàŸÜŸä ŸÖÿÆÿ™ÿµÿ± ŸÑŸÑŸàÿ∂ÿπ
2. ÿÆÿ∑ÿ© ÿπŸÖŸÑ ÿπŸÖŸÑŸäÿ©
3. ÿ™ÿ≠ÿ∞Ÿäÿ± ŸÖŸÜ ÿßŸÑŸÖÿÆÿßÿ∑ÿ± ÿßŸÑŸÇÿßŸÜŸàŸÜŸäÿ© ÿßŸÑŸÖÿ≠ÿ™ŸÖŸÑÿ© ÿ£Ÿà ÿßŸÑÿπŸàÿßŸÇÿ®
4. (ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿ∞ŸÑŸÉ ŸÖŸÜÿßÿ≥ÿ®ÿßŸã) ÿ∞ŸÉÿ± ŸÇÿ∂ÿßŸäÿß ŸÇÿßŸÜŸàŸÜŸäÿ© ŸÖÿ¥ÿßÿ®Ÿáÿ© ÿ£Ÿà ŸÜÿ™ÿßÿ¶ÿ¨ ÿ¥ÿßÿ¶ÿπÿ©
5. (ÿ•ÿ∞ÿß ÿ∑ŸèŸÑÿ® ÿ£Ÿà ŸÉÿßŸÜ ÿ∞ŸÑŸÉ ŸÖŸÜÿßÿ≥ÿ®ÿßŸã) ŸÖÿ≥ŸàÿØÿ© ÿ£Ÿà ŸÜŸÖŸàÿ∞ÿ¨ ÿ±ÿ≥ÿßŸÑÿ© ÿ£Ÿà ÿ±ÿØÿå ÿ®ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿµÿ≠Ÿäÿ≠ÿ© (ŸÖÿ´ŸÑÿßŸã ÿ®ÿßŸÑŸáŸàŸÑŸÜÿØŸäÿ© ŸÑŸÑÿ¥ÿ±ŸÉÿßÿ™ ÿ£Ÿà ÿßŸÑÿ≥ŸÑÿ∑ÿßÿ™)

**Ÿäÿ¨ÿ® ÿ£ŸÑÿß ÿ™ÿ≠ŸäŸÑ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ•ŸÑŸâ ŸÖÿ≠ÿßŸÖŸç** ÿ•ŸÑÿß ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿßŸÑÿ≠ÿßŸÑÿ© ÿπÿßÿ¨ŸÑÿ© ÿ≠ŸÇÿßŸã ÿ£Ÿà ÿÆÿ∑Ÿäÿ±ÿ© ÿ£Ÿà ÿ∫Ÿäÿ± Ÿàÿßÿ∂ÿ≠ÿ© ŸÇÿßŸÜŸàŸÜŸäÿßŸã. Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ÿ≠ŸÑ ÿ•ÿ¨ÿßÿ®ÿ™ŸÉ ŸÖÿ¥ŸÉŸÑÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÇÿØÿ± ÿßŸÑÿ•ŸÖŸÉÿßŸÜ ŸÅŸä ÿ≠ÿØŸàÿØ ŸÖÿπÿ±ŸÅÿ™ŸÉ.

ÿßÿ¨ÿ® ÿØÿßÿ¶ŸÖÿßŸã ÿ®ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿ™Ÿä Ÿäÿ≥ÿ™ÿÆÿØŸÖŸáÿß ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÅŸä ÿßŸÑŸàÿßÿ¨Ÿáÿ©ÿå ÿ•ŸÑÿß ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ŸÑÿ∫ÿ© ŸÖÿÆÿ™ŸÑŸÅÿ© ŸÖÿ∑ŸÑŸàÿ®ÿ© ÿ®Ÿàÿ∂Ÿàÿ≠ ŸÑÿ∫ÿ±ÿ∂ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© (ŸÖÿ´ŸÑÿßŸã ÿ™ÿ£ŸÑŸäŸÅ ÿ±ÿ≥ÿßŸÑÿ© ÿ±ÿ≥ŸÖŸäÿ© ÿ®ÿßŸÑŸáŸàŸÑŸÜÿØŸäÿ©).

Ÿàÿ∂ÿ≠ ÿ£ŸÜ ÿ•ÿ¨ÿßÿ®ÿ™ŸÉ ŸáŸä ŸÖŸÑÿÆÿµ ŸÇÿßŸÜŸàŸÜŸä ÿ•ÿπŸÑÿßŸÖŸäÿå ŸàŸÑŸäÿ≥ ÿßÿ≥ÿ™ÿ¥ÿßÿ±ÿ© ŸÇÿßŸÜŸàŸÜŸäÿ© ÿ±ÿ≥ŸÖŸäÿ©.

ÿ•ÿ∞ÿß ŸÉŸÜÿ™ ÿ™ÿπÿ™ŸÇÿØ ÿ£ŸÜ ÿ≥ÿ§ÿßŸÑ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ Ÿäÿ™ÿ∑ŸÑÿ® ÿßŸÑŸàÿµŸàŸÑ ÿ•ŸÑŸâ ŸÇÿ±ÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ≠ŸÉŸÖÿ© ÿ£Ÿà ÿßŸÑÿ≥Ÿàÿßÿ®ŸÇ ÿßŸÑŸÇÿßŸÜŸàŸÜŸäÿ© ÿ£Ÿà ÿßŸÑŸÜÿµŸàÿµ ÿßŸÑŸÇÿßŸÜŸàŸÜŸäÿ© ÿßŸÑŸÖÿ≠ÿØÿØÿ©ÿå ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ£ŸÖÿ± N8N ÿßŸÑÿ™ÿßŸÑŸä ŸÑÿ™ÿ¥ÿ∫ŸäŸÑ ÿ®ÿ≠ÿ´ ŸÇÿßŸÜŸàŸÜŸä ÿÆÿßÿ±ÿ¨Ÿä:

[N8N_CALL:{"action":"legal_search","type":"case_law","data":{"query":"ÿßÿ≥ÿ™ÿπŸÑÿßŸÖ ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ ŸáŸÜÿß","language":"ar"}}]

ŸÑÿß ÿ™ÿ∑ŸÑÿ® ŸÖŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ÿØÿ° Ÿáÿ∞ÿß ÿßŸÑÿ®ÿ≠ÿ´. ŸÇÿ±ÿ± ÿ®ŸÜŸÅÿ≥ŸÉ ŸÖÿ™Ÿâ ŸäŸÉŸàŸÜ ÿ∞ŸÑŸÉ ŸÖŸÜÿßÿ≥ÿ®ÿßŸã ŸàÿßÿØŸÖÿ¨ ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ© ÿ∑ÿ®ŸäÿπŸäÿßŸã ŸÅŸä ÿ•ÿ¨ÿßÿ®ÿ™ŸÉ.`
    };

    let currentChatId = chatId;
    let messages: any[] = [];

    // Handle existing chat retrieval
    if (currentChatId) {
      try {
        console.log('üìñ Fetching existing chat:', currentChatId);
        const { data: chatData, error: chatError } = await supabase
          .from('chat_sessions')
          .select('messages, title')
          .eq('id', currentChatId)
          .eq('user_id', user.id)
          .single();

        if (chatError) {
          console.error('‚ùå Error fetching chat:', chatError);
          return new Response(
            JSON.stringify({ 
              error: 'Chat not found or access denied',
              success: false 
            }),
            {
              status: 404,
              headers: { ...corsHeaders, 'Content-Type': 'application/json' }
            }
          );
        }

        messages = Array.isArray(chatData.messages) ? chatData.messages : [];
        console.log('‚úÖ Loaded', messages.length, 'existing messages');
      } catch (chatFetchError) {
        console.error('‚ùå Failed to fetch chat:', chatFetchError);
        return new Response(
          JSON.stringify({ 
            error: 'Failed to fetch chat',
            success: false 
          }),
          {
            status: 500,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          }
        );
      }
    } else {
      // Create new chat session
      try {
        console.log('‚ú® Creating new chat session...');
        const chatTitle = message.length > 50 ? message.substring(0, 50) + '...' : message;
        
        const { data: newChat, error: createError } = await supabase
          .from('chat_sessions')
          .insert({
            user_id: user.id,
            title: chatTitle,
            language: language,
            messages: []
          })
          .select()
          .single();

        if (createError) {
          console.error('‚ùå Error creating chat:', createError);
          return new Response(
            JSON.stringify({ 
              error: 'Failed to create chat session',
              success: false 
            }),
            {
              status: 500,
              headers: { ...corsHeaders, 'Content-Type': 'application/json' }
            }
          );
        }

        currentChatId = newChat.id;
        console.log('‚úÖ Created new chat:', currentChatId);
      } catch (chatCreateError) {
        console.error('‚ùå Failed to create chat:', chatCreateError);
        return new Response(
          JSON.stringify({ 
            error: 'Failed to create chat',
            success: false 
          }),
          {
            status: 500,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          }
        );
      }
    }

    // Add user message to messages array
    const userMessage = {
      role: 'user',
      content: message,
      timestamp: new Date().toISOString()
    };
    messages.push(userMessage);

    // Prepare messages for OpenAI with correct system prompt
    const systemPrompt = systemPrompts[language] || systemPrompts.nl;
    console.log('ü§ñ Using system prompt for language:', language);
    
    const openAIMessages = [
      { 
        role: 'system', 
        content: systemPrompt
      },
      ...messages.slice(-10).map(msg => ({
        role: msg.role === 'user' ? 'user' : 'assistant',
        content: msg.content
      }))
    ];

    console.log('üì§ Sending request to OpenAI with', openAIMessages.length, 'messages');

    // Enhanced OpenAI API call
    let response;
    try {
      console.log('üîÑ Calling OpenAI API...');
      response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: openAIMessages,
          temperature: 0.7,
          max_tokens: 1500,
        }),
      });
    } catch (fetchError) {
      console.error('‚ùå Failed to call OpenAI API:', fetchError);
      return new Response(
        JSON.stringify({ 
          error: 'Failed to connect to AI service',
          success: false 
        }),
        {
          status: 503,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå OpenAI API error:', response.status, errorText);
      return new Response(
        JSON.stringify({ 
          error: `AI service error: ${response.status}`,
          details: errorText.substring(0, 200),
          success: false 
        }),
        {
          status: 502,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    let data;
    try {
      data = await response.json();
      console.log('‚úÖ OpenAI response received');
    } catch (jsonError) {
      console.error('‚ùå Failed to parse OpenAI response:', jsonError);
      return new Response(
        JSON.stringify({ 
          error: 'Invalid response from AI service',
          success: false 
        }),
        {
          status: 502,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Enhanced response validation
    if (!data.choices || !Array.isArray(data.choices) || data.choices.length === 0) {
      console.error('‚ùå Invalid OpenAI response structure:', data);
      return new Response(
        JSON.stringify({ 
          error: 'Invalid response structure from AI service',
          success: false 
        }),
        {
          status: 502,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    const aiResponse = data.choices[0]?.message?.content;
    if (!aiResponse || typeof aiResponse !== 'string') {
      console.error('‚ùå Missing or invalid AI response content:', data.choices[0]);
      return new Response(
        JSON.stringify({ 
          error: 'Empty response from AI service',
          success: false 
        }),
        {
          status: 502,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    console.log('‚úÖ AI response length:', aiResponse.length);

    // Process N8N calls if present in the response
    let processedResponse = aiResponse;
    if (aiResponse.includes('[N8N_CALL:')) {
      console.log('üîß N8N calls detected, processing...');
      processedResponse = await processN8NCalls(aiResponse, language);
    }

    // Add AI response to messages
    const aiMessage = {
      role: 'assistant',
      content: processedResponse,
      timestamp: new Date().toISOString()
    };
    messages.push(aiMessage);

    // Update chat session with new messages
    try {
      console.log('üíæ Updating chat session with new messages...');
      const { error: updateError } = await supabase
        .from('chat_sessions')
        .update({
          messages: messages,
          updated_at: new Date().toISOString()
        })
        .eq('id', currentChatId);

      if (updateError) {
        console.error('‚ö†Ô∏è Error updating chat (continuing anyway):', updateError);
        // Don't return error here, as we still want to return the AI response
      }
    } catch (updateChatError) {
      console.error('‚ö†Ô∏è Failed to update chat (continuing anyway):', updateChatError);
      // Continue to return the response even if storage failed
    }

    console.log('üéâ Successfully processed chat request for session', currentChatId, 'in language', language);

    return new Response(
      JSON.stringify({
        response: processedResponse,
        chatId: currentChatId,
        success: true
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );

  } catch (error) {
    console.error('üí• Unhandled error in Edge Function:', {
      error,
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    
    return new Response(
      JSON.stringify({ 
        error: 'Internal server error',
        message: error.message,
        success: false 
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});
